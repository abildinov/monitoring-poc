#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ mcp-server –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "mcp-server"))

import httpx
from clients.prometheus_client import PrometheusClient
from clients.loki_client import LokiClient
from llm.ollama_client import OllamaClient
from alerts.alert_manager import AlertManager
from mcp_client import MCPClient
from config import settings


class TelegramMonitoringBot:
    """Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, bot_token: str, use_mcp: bool = True):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.client = httpx.AsyncClient(timeout=30)
        self.use_mcp = use_mcp
        
        if use_mcp:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞
            self.mcp = MCPClient("http://localhost:3000")
            print("Telegram –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä")
        else:
            # –ü—Ä—è–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (fallback)
            self.prometheus = PrometheusClient(settings.prometheus_url, settings.http_timeout)
            self.loki = LokiClient(settings.loki_url, settings.http_timeout)
            self.ollama = OllamaClient(settings.ollama_host, settings.ollama_model, settings.ollama_timeout)
            self.alert_manager = AlertManager()
            print("Telegram –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
        
        # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.commands = {
            '/start': self.cmd_start,
            '/help': self.cmd_help,
            '/menu': self.cmd_menu,
            '/status': self.cmd_status,
            '/analyze': self.cmd_analyze_full,
            '/health': self.cmd_health,
            '/alerts': self.cmd_alerts,
            '/chat': self.cmd_chat
        }
    
    async def send_message(self, chat_id: str, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(text) > 4000:
                text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ Telegram API: {result.get('description', 'Unknown error')}")
                return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
            try:
                url = f"{self.base_url}/sendMessage"
                # –£–¥–∞–ª—è–µ–º Markdown —Å–∏–º–≤–æ–ª—ã
                clean_text = text.replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "")
                data = {
                    "chat_id": chat_id,
                    "text": clean_text
                }
                
                response = await self.client.post(url, json=data)
                response.raise_for_status()
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
                return False
    
    async def send_chat_action(self, chat_id: str, action: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–ø–µ—á–∞—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏ —Ç.–¥.)"""
        try:
            url = f"{self.base_url}/sendChatAction"
            data = {
                "chat_id": chat_id,
                "action": action
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False
    
    def get_main_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        return {
            "inline_keyboard": [
                [
                    {"text": "üéì –ê–Ω–∞–ª–∏–∑ LLM", "callback_data": "analyze"}
                ],
                [
                    {"text": "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "callback_data": "status"},
                    {"text": "üè• –ó–¥–æ—Ä–æ–≤—å–µ", "callback_data": "health"}
                ],
                [
                    {"text": "üö® –ê–ª–µ—Ä—Ç—ã", "callback_data": "alerts"},
                    {"text": "üí¨ –ß–∞—Ç —Å LLM", "callback_data": "chat"}
                ]
            ]
        }
    
    def get_reply_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —á–∞—Ç–µ (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)"""
        return {
            "keyboard": [
                [
                    {"text": "üéì –ê–Ω–∞–ª–∏–∑ LLM"},
                    {"text": "üìä –°—Ç–∞—Ç—É—Å"}
                ],
                [
                    {"text": "üè• –ó–¥–æ—Ä–æ–≤—å–µ"},
                    {"text": "üö® –ê–ª–µ—Ä—Ç—ã"}
                ],
                [
                    {"text": "üí¨ –ß–∞—Ç —Å LLM"},
                    {"text": "üìã –ú–µ–Ω—é"}
                ]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False,
            "selective": False
        }
    
    async def send_message_with_keyboard(self, chat_id: str, text: str, keyboard: dict, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 4000:
                text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "reply_markup": keyboard
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ Telegram API: {result.get('description', 'Unknown error')}")
                return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            return False
    
    async def send_message_with_reply_keyboard(self, chat_id: str, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 4000:
                text = text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "reply_markup": self.get_reply_keyboard()
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ Telegram API: {result.get('description', 'Unknown error')}")
                return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            return False
    
    
    async def cmd_start(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await self.send_message_with_keyboard(chat_id, 
            """ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞!*

üìä *–°–µ—Ä–≤–µ—Ä:* 147.45.157.2
ü§ñ *LLM:* Ollama (Llama 3)
üéì *–î–ª—è –∑–∞—â–∏—Ç—ã –¥–∏–ø–ª–æ–º–∞*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/analyze` - –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/alerts` - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
‚Ä¢ `/health` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚Ä¢ `/chat <—Ç–µ–∫—Å—Ç>` - –í–æ–ø—Ä–æ—Å –∫ LLM
‚Ä¢ `/menu` - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞

üí° *–î–ª—è –∑–∞—â–∏—Ç—ã –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ "üéì –ê–Ω–∞–ª–∏–∑ LLM"*""",
            self.get_main_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)
        await self.send_message_with_reply_keyboard(chat_id,
            "üîò *–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞:*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
        
        return ""  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —Ç.–∫. —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    async def cmd_help(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        return await self.cmd_start(chat_id, message)
    
    async def cmd_menu(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        await self.send_message_with_keyboard(chat_id, 
            "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            self.get_main_keyboard()
        )
        return ""  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —Ç.–∫. —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    async def cmd_status(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if self.use_mcp and hasattr(self, 'mcp') and self.mcp:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç
                cpu_result = await self.mcp.call_tool("get_cpu_usage")
                memory_result = await self.mcp.call_tool("get_memory_status")
                network_result = await self.mcp.call_tool("get_network_status")
                alerts_result = await self.mcp.call_tool("get_active_alerts")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                result = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ MCP*

*CPU:* {cpu_result[:150]}...
*–ü–∞–º—è—Ç—å:* {memory_result[:150]}...
*–°–µ—Ç—å:* {network_result[:150]}...
*–ê–ª–µ—Ä—Ç—ã:* {alerts_result[:150]}...

‚è∞ *–í—Ä–µ–º—è:* {datetime.now().strftime('%H:%M:%S')}"""
                
                return result
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                cpu = await self.prometheus.get_current_cpu()
                memory = await self.prometheus.get_current_memory()
                disks = await self.prometheus.get_disk_usage()
                network = await self.prometheus.get_network_status()
                active_alerts = self.alert_manager.get_active_alerts()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                status = "üü¢ –ù–û–†–ú–ê–õ–¨–ù–û" if len(active_alerts) == 0 else "üî¥ –ü–†–û–ë–õ–ï–ú–´"
                
                result = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}*

üñ•Ô∏è *CPU:* {cpu:.1f}% {'‚ö†Ô∏è' if cpu > settings.cpu_threshold else '‚úÖ'}
üíæ *–ü–∞–º—è—Ç—å:* {memory['percent']:.1f}% ({memory['used_gb']:.1f}/{memory['total_gb']:.1f} GB) {'‚ö†Ô∏è' if memory['percent'] > settings.memory_threshold else '‚úÖ'}
üíø *–î–∏—Å–∫–∏:* {len(disks)} –Ω–∞–π–¥–µ–Ω–æ
üåê *–°–µ—Ç—å:* {network['status'].upper()}
üö® *–ê–ª–µ—Ä—Ç—ã:* {len(active_alerts)} –∞–∫—Ç–∏–≤–Ω—ã—Ö

‚è∞ *–í—Ä–µ–º—è:* {datetime.now().strftime('%H:%M:%S')}"""
                
                return result
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    async def cmd_alerts(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /alerts - –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            if self.use_mcp and hasattr(self, 'mcp') and self.mcp:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç
                alerts_result = await self.mcp.call_tool("get_active_alerts")
                return f"üö® *–ê–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ MCP*\n\n{alerts_result}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                active_alerts = self.alert_manager.get_active_alerts()
                stats = self.alert_manager.get_stats()
                
                if not active_alerts:
                    return "‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç*"
                
                result = f"üö® *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: {len(active_alerts)}*\n\n"
                
                for alert in active_alerts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    emoji = {'critical': 'üî¥', 'warning': 'üü°', 'info': 'üîµ'}.get(alert.severity, 'üì¢')
                    time_str = alert.timestamp.strftime('%H:%M:%S')
                    
                    result += f"{emoji} *{alert.name}*\n"
                    result += f"   {alert.message}\n"
                    result += f"   –í—Ä–µ–º—è: {time_str}\n\n"
                
                if len(active_alerts) > 5:
                    result += f"... –∏ –µ—â–µ {len(active_alerts) - 5} –∞–ª–µ—Ä—Ç–æ–≤"
                
                return result
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
    
    async def cmd_chat(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /chat - —á–∞—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            question = message.replace('/chat', '').strip()
            
            if not question:
                return "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /chat\n\n–ü—Ä–∏–º–µ—Ä: `/chat –ö–∞–∫ –¥–µ–ª–∞ —Å CPU?`"
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            cpu = await self.prometheus.get_current_cpu()
            memory = await self.prometheus.get_current_memory()
            errors = await self.loki.get_error_logs(hours=1, limit=3)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = f"""
–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:
- CPU: {cpu:.1f}% (–ø–æ—Ä–æ–≥: {settings.cpu_threshold}%)
- –ü–∞–º—è—Ç—å: {memory['percent']:.1f}% (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {memory['used_gb']:.1f} GB –∏–∑ {memory['total_gb']:.1f} GB)
- –û—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {len(errors)}
"""
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = f"""–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
- CPU {cpu:.1f}% - —ç—Ç–æ –ù–ò–ñ–ï –ø–æ—Ä–æ–≥–∞ {settings.cpu_threshold}% (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)
- –ü–∞–º—è—Ç—å {memory['percent']:.1f}% - —ç—Ç–æ –ù–ò–ñ–ï –ø–æ—Ä–æ–≥–∞ {settings.memory_threshold}% (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ù–ò–ñ–ï –ø–æ—Ä–æ–≥–æ–≤ - –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ.
–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –í–´–®–ï –ø–æ—Ä–æ–≥–æ–≤ - —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
            
            full_prompt = f"{context}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Ollama
            response = await self.ollama.generate(
                prompt=full_prompt,
                system=system_prompt,
                temperature=0.7,
                max_tokens=512
            )
            
            return f"üí¨ *–í–æ–ø—Ä–æ—Å:* {question}\n\n*–û—Ç–≤–µ—Ç:*\n{response}"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def cmd_health(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            prom_ok = await self.prometheus.check_health()
            loki_ok = await self.loki.check_health()
            ollama_ok = await self.ollama.check_health()
            
            result = "üè• *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:*\n\n"
            
            result += f"{'‚úÖ' if prom_ok else '‚ùå'} *Prometheus:* {'OK' if prom_ok else 'ERROR'}\n"
            result += f"{'‚úÖ' if loki_ok else '‚ùå'} *Loki:* {'OK' if loki_ok else 'ERROR'}\n"
            result += f"{'‚úÖ' if ollama_ok else '‚ùå'} *Ollama:* {'OK' if ollama_ok else 'ERROR'}\n"
            
            overall = "üü¢ –ó–î–û–†–û–í–ê" if all([prom_ok, loki_ok, ollama_ok]) else "üî¥ –ü–†–û–ë–õ–ï–ú–´"
            result += f"\n*–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:* {overall}"
            
            return result
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}"
    
    async def cmd_analyze_full(self, chat_id: str, message: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /analyze - –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ –†–ï–ê–õ–¨–ù–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ LLM"""
        try:
            await self.send_chat_action(chat_id, "typing")
            
            if self.use_mcp:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
                result = "ü§ñ *–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ß–ï–†–ï–ó MCP*\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += "üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä...\n"
                
                await self.send_message(chat_id, result)
                await self.send_chat_action(chat_id, "typing")
                
                # –í—ã–∑—ã–≤–∞–µ–º MCP tools
                cpu_result = await self.mcp.call_tool("get_cpu_usage")
                memory_result = await self.mcp.call_tool("get_memory_status")
                alerts_result = await self.mcp.call_tool("get_active_alerts")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                result = "üéì –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ß–ï–†–ï–ó MCP\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += f"**CPU:**\n{cpu_result}\n\n"
                result += f"**–ü–∞–º—è—Ç—å:**\n{memory_result}\n\n"
                result += f"**–ê–ª–µ—Ä—Ç—ã:**\n{alerts_result}\n\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += "‚ú® –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑:\n"
                result += "‚úì –ï–¥–∏–Ω—ã–π MCP –±—ç–∫–µ–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n"
                result += "‚úì –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ tools\n"
                result += "‚úì –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞\n"
                result += "‚úì –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n\n"
                result += "üí° –≠—Ç–æ –∏ –µ—Å—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                result += "–¥–ª—è Telegram, Claude Desktop –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!"
                
            else:
                # Fallback: –ø—Ä—è–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                result = "ü§ñ *–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ß–ï–†–ï–ó LLM*\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += "üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ `147.45.157.2`...\n"
                
                await self.send_message(chat_id, result)
                await self.send_chat_action(chat_id, "typing")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
                cpu = await self.prometheus.get_current_cpu()
                memory = await self.prometheus.get_current_memory()
                disks = await self.prometheus.get_disk_usage()
                active_alerts = self.alert_manager.get_active_alerts()
                errors = await self.loki.get_error_logs(hours=1, limit=5)
                
                root_disk = next((d for d in disks if d['mountpoint'] == '/'), disks[0] if disks else None)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                result = "‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã*\n\n"
                result += f"*–ú–µ—Ç—Ä–∏–∫–∏:*\n"
                result += f"‚Ä¢ CPU: `{cpu:.1f}%`\n"
                result += f"‚Ä¢ Memory: `{memory['percent']:.1f}%` ({memory['used_gb']:.1f}/{memory['total_gb']:.1f} GB)\n"
                result += f"‚Ä¢ Disk: `{root_disk['percent']:.1f}%`\n"
                result += f"‚Ä¢ –ê–ª–µ—Ä—Ç—ã: `{len(active_alerts)}`\n"
                result += f"‚Ä¢ –û—à–∏–±–∫–∏ (1—á): `{len(errors)}`\n\n"
                result += "üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...\n"
                result += "‚è± _–≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥_"
                
                await self.send_message(chat_id, result)
                await self.send_chat_action(chat_id, "typing")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
                metrics_data = {
                    "CPU": f"{cpu:.2f}%",
                    "Memory": f"{memory['percent']:.2f}% (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {memory['used_gb']:.2f} GB –∏–∑ {memory['total_gb']:.2f} GB)",
                    "Disk": f"{root_disk['percent']:.2f}% (—Ç–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {root_disk['mountpoint']})",
                    "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã": len(active_alerts),
                    "–û—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å": len(errors)
                }
                
                # –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                analysis = await self.ollama.analyze_metrics(
                    metrics_data=metrics_data,
                    context=f"–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ 147.45.157.2 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞—â–∏—Ç–µ –¥–∏–ø–ª–æ–º–∞"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó Markdown (—Ç.–∫. LLM –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
                result = "üéì –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê LLM\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += analysis + "\n\n"
                result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                result += "‚ú® –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑:\n"
                result += "‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏\n"
                result += "‚úì –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º\n"
                result += "‚úì –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                result += "‚úì –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏\n"
                result += "‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
                result += "üí° –≠—Ç–æ –∏ –µ—Å—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è - LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç\n"
                result += "–†–ï–ê–õ–¨–ù–´–ô —Å–µ—Ä–≤–µ—Ä –∏ –¥–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.send_message(chat_id, result, parse_mode=None)
            return ""  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    
    async def process_message(self, chat_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç"""
        message = message.strip()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        button_map = {
            "üéì –ê–Ω–∞–ª–∏–∑ LLM": "/analyze",
            "üìä –°—Ç–∞—Ç—É—Å": "/status",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "/health",
            "üö® –ê–ª–µ—Ä—Ç—ã": "/alerts",
            "üí¨ –ß–∞—Ç —Å LLM": "/chat",
            "üìã –ú–µ–Ω—é": "/menu"
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É
        if message in button_map:
            message = button_map[message]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        for cmd, handler in self.commands.items():
            if message.startswith(cmd):
                return await handler(chat_id, message)
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    
    async def get_updates(self, offset: int = 0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {"offset": offset, "timeout": 30}
            
            response = await self.client.get(url, params=params, timeout=35)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∫–∞–∂–¥—ã–π —Ä–∞–∑ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–π–º–∞—É—Ç)
            if "timeout" not in str(e).lower():
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return {"ok": False, "result": []}
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        
        offset = 0
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = await self.get_updates(offset)
                
                if not updates.get("ok"):
                    print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    await asyncio.sleep(5)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                for update in updates.get("result", []):
                    offset = update["update_id"] + 1
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if "message" in update:
                        message = update["message"]
                        chat_id = str(message["chat"]["id"])
                        text = message.get("text", "")
                        
                        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
                        await self.send_message(chat_id, "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É...")
                        response = await self.process_message(chat_id, text)
                        print(f"üìù –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:100]}...")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                        await self.send_chat_action(chat_id, "typing")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
                        if response and response.strip():
                            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram...")
                            success = await self.send_message(chat_id, response)
                            if success:
                                print(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                            else:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞!")
                        else:
                            print(f"‚ÑπÔ∏è  –û—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
                    elif "callback_query" in update:
                        callback = update["callback_query"]
                        chat_id = str(callback["message"]["chat"]["id"])
                        callback_data = callback.get("data", "")
                        message_id = callback["message"]["message_id"]
                        
                        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
                        
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                        await self.answer_callback_query(callback["id"], "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
                        await self.send_message(chat_id, "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                        response = await self.process_message(chat_id, f"/{callback_data}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                        if response and response.strip():
                            success = await self.send_message(chat_id, response)
                            if success:
                                print(f"–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                            else:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É!")
                        else:
                            print(f"‚ÑπÔ∏è  –û—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
    
    async def answer_callback_query(self, callback_query_id: str, text: str = "") -> bool:
        """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –∑–∞–ø—Ä–æ—Å"""
        try:
            url = f"{self.base_url}/answerCallbackQuery"
            data = {
                "callback_query_id": callback_query_id,
                "text": text,
                "show_alert": False
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.client.aclose()
        
        if self.use_mcp:
            await self.mcp.close()
        else:
            await self.prometheus.close()
            await self.loki.close()
            await self.ollama.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not settings.telegram_enabled or not settings.telegram_bot_token:
        print("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_telegram_bot.py")
        return 1
    
    bot = TelegramMonitoringBot(settings.telegram_bot_token)
    
    try:
        await bot.run()
    finally:
        await bot.close()
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
