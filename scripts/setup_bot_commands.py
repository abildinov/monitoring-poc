#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram
–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ mcp-server –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "mcp-server"))

from config import settings
import httpx


async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    if not settings.telegram_enabled or not settings.telegram_bot_token:
        print("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_telegram_bot.py")
        return False
    
    bot_token = settings.telegram_bot_token
    base_url = f"https://api.telegram.org/bot{bot_token}"
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    print(f"üîë Token: {bot_token[:10]}...")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
    commands = [
        {
            "command": "start",
            "description": "üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        },
        {
            "command": "help", 
            "description": "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        },
        {
            "command": "menu",
            "description": "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"
        },
        {
            "command": "analyze",
            "description": "üéì –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ LLM"
        },
        {
            "command": "status",
            "description": "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        },
        {
            "command": "health",
            "description": "üè• –ó–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        },
        {
            "command": "alerts",
            "description": "üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"
        },
        {
            "command": "chat",
            "description": "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å LLM"
        }
    ]
    
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            url = f"{base_url}/setMyCommands"
            data = {
                "commands": commands
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...")
            response = await client.post(url, json=data)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("ok"):
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                print(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(commands)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                print(f"\nüìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                for cmd in commands:
                    print(f"  /{cmd['command']} - {cmd['description']}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {result.get('description', 'Unknown error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return False


async def get_bot_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    
    if not settings.telegram_enabled or not settings.telegram_bot_token:
        print("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    bot_token = settings.telegram_bot_token
    base_url = f"https://api.telegram.org/bot{bot_token}"
    
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            url = f"{base_url}/getMe"
            
            response = await client.get(url)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("ok"):
                bot_info = result.get("result", {})
                print(f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
                print(f"  –ò–º—è: {bot_info.get('first_name', 'Unknown')}")
                print(f"  Username: @{bot_info.get('username', 'Unknown')}")
                print(f"  ID: {bot_info.get('id', 'Unknown')}")
                print(f"  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: {bot_info.get('can_join_groups', False)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('description', 'Unknown error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False


async def get_current_commands():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    
    if not settings.telegram_enabled or not settings.telegram_bot_token:
        print("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    bot_token = settings.telegram_bot_token
    base_url = f"https://api.telegram.org/bot{bot_token}"
    
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            url = f"{base_url}/getMyCommands"
            
            response = await client.get(url)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("ok"):
                commands = result.get("result", [])
                print(f"üìã –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ({len(commands)}):")
                
                if commands:
                    for cmd in commands:
                        print(f"  /{cmd.get('command', 'unknown')} - {cmd.get('description', 'No description')}")
                else:
                    print("  –ö–æ–º–∞–Ω–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {result.get('description', 'Unknown error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("NASTROYKA KOMAND TELEGRAM BOTA")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    print("\n1. Poluchenie informacii o bote...")
    await get_bot_info()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    print("\n2. Tekushchie komandy bota...")
    await get_current_commands()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print("\n3. Ustanovka komand...")
    success = await setup_bot_commands()
    
    if success:
        print("\nKomandy uspeshno ustanovleny!")
        print("\nTeper' v Telegram:")
        print("  1. Otkroyte chat s botom")
        print("  2. Nazhmite na knopku menu ryadom s polem vvoda")
        print("  3. Vyberite nuzhnuyu komandu iz spiska")
        print("\nKomandy takzhe mozhno vvodit' vruchnuyu: /analyze, /status i t.d.")
    else:
        print("\nOshibka ustanovki komand!")
        print("Prover'te nastroyki v .env fayle")
    
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
