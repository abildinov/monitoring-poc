#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ MCP —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä (SSE —Ä–µ–∂–∏–º) –∏ Telegram –±–æ—Ç–∞
"""

import asyncio
import subprocess
import sys
import time
from pathlib import Path


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–π MCP —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = Path.cwd()
    if not (current_dir / "mcp-server").exists():
        print("–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
        return 1
    
    processes = []
    
    try:
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –≤ HTTP —Ä–µ–∂–∏–º–µ
        print("\n1. –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ (HTTP —Ä–µ–∂–∏–º)...")
        mcp_cmd = [
            sys.executable, 
            "mcp-server/server.py", 
            "--transport", "http"
        ]
        
        mcp_process = subprocess.Popen(
            mcp_cmd,
            cwd=current_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        processes.append(("MCP Server", mcp_process))
        
        print(f"MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {mcp_process.pid})")
        print("   URL: http://localhost:3000")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
        print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if mcp_process.poll() is not None:
            print("MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
            stdout, stderr = mcp_process.communicate()
            print(f"STDOUT: {stdout}")
            print(f"STDERR: {stderr}")
            return 1
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        print("\n2. –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        telegram_cmd = [sys.executable, "scripts/start_telegram_bot.py"]
        
        telegram_process = subprocess.Popen(
            telegram_cmd,
            cwd=current_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        processes.append(("Telegram Bot", telegram_process))
        
        print(f"Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {telegram_process.pid})")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
        print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞...")
        await asyncio.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if telegram_process.poll() is not None:
            print("Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
            stdout, stderr = telegram_process.communicate()
            print(f"STDOUT: {stdout}")
            print(f"STDERR: {stderr}")
            return 1
        
        # 3. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
        print("\n" + "=" * 60)
        print("–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("=" * 60)
        print()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   ‚Ä¢ MCP –°–µ—Ä–≤–µ—Ä: http://localhost:3000 (HTTP API)")
        print("   ‚Ä¢ Telegram –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
        print("   ‚Ä¢ Claude Desktop: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ claude_desktop_config.json")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   ‚Ä¢ Telegram: /start -> /analyze")
        print("   ‚Ä¢ Claude Desktop: '–ü–æ–∫–∞–∂–∏ –∑–∞–≥—Ä—É–∑–∫—É CPU'")
        print()
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        while True:
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            for name, process in processes:
                if process.poll() is not None:
                    print(f"{name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                    stdout, stderr = process.communicate()
                    print(f"STDOUT: {stdout}")
                    print(f"STDERR: {stderr}")
                    return 1
    
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for name, process in processes:
            if process.poll() is None:
                print(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                
                # –ñ–¥–µ–º graceful shutdown
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {name}...")
                    process.kill()
        
        print("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
