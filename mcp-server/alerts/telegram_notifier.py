"""
Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
"""

import httpx
from typing import Optional
from datetime import datetime
from loguru import logger
from .alert_manager import Alert


class TelegramNotifier:
    """–£–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram"""
    
    def __init__(self, bot_token: str, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.client = httpx.AsyncClient(timeout=30)
        
        logger.info(f"TelegramNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    async def send_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Markdown, HTML)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_alert(self, alert: Alert) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ Telegram
        
        Args:
            alert: –û–±—ä–µ–∫—Ç –∞–ª–µ—Ä—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        severity_emoji = {
            'critical': 'üö®',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }
        
        emoji = severity_emoji.get(alert.severity, 'üì¢')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_str = alert.timestamp.strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"""
{emoji} *{alert.name}*

*–°–æ–æ–±—â–µ–Ω–∏–µ:* {alert.message}
*–ú–µ—Ç—Ä–∏–∫–∞:* `{alert.metric_name}`
*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:* `{alert.current_value:.2f}`
*–ü–æ—Ä–æ–≥:* `{alert.threshold}`
*–í—Ä–µ–º—è:* {time_str}

*–°—Ç–∞—Ç—É—Å:* {alert.severity.upper()}
        """.strip()
        
        return await self.send_message(message)
    
    async def send_resolved_alert(self, alert: Alert) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞
        
        Args:
            alert: –û–±—ä–µ–∫—Ç –∞–ª–µ—Ä—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not alert.resolved_at:
            return False
        
        time_str = alert.resolved_at.strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
‚úÖ *–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {alert.name}
*–ú–µ—Ç—Ä–∏–∫–∞:* `{alert.metric_name}`
*–í—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:* {time_str}

–ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞.
        """.strip()
        
        return await self.send_message(message)
    
    async def send_summary(self, stats: dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∞–ª–µ—Ä—Ç–∞–º
        
        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        active_count = stats.get('active_alerts', 0)
        severity_breakdown = stats.get('severity_breakdown', {})
        
        message = f"""
üìä *–°–≤–æ–¥–∫–∞ –ø–æ –∞–ª–µ—Ä—Ç–∞–º*

*–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:* {active_count}

*–ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:*
"""
        
        for severity, count in severity_breakdown.items():
            emoji = {'critical': 'üö®', 'warning': '‚ö†Ô∏è', 'info': '‚ÑπÔ∏è'}.get(severity, 'üì¢')
            message += f"{emoji} {severity}: {count}\n"
        
        message += f"\n*–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return await self.send_message(message)
    
    async def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            url = f"{self.base_url}/getMe"
            response = await self.client.get(url)
            response.raise_for_status()
            
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'unknown')}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {data.get('description', 'Unknown error')}")
                return False
                
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.client.aclose()
        logger.info("TelegramNotifier –∑–∞–∫—Ä—ã—Ç")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio
    
    async def test():
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        bot_token = "YOUR_BOT_TOKEN"
        chat_id = "YOUR_CHAT_ID"
        
        notifier = TelegramNotifier(bot_token, chat_id)
        
        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if await notifier.test_connection():
            print("‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if await notifier.send_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞
            from .alert_manager import Alert
            
            test_alert = Alert(
                id="test_alert",
                name="Test Alert",
                severity="warning",
                message="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
                metric_name="cpu_usage",
                current_value=85.5,
                threshold=80.0,
                timestamp=datetime.now()
            )
            
            if await notifier.send_alert(test_alert):
                print("‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        await notifier.close()
    
    asyncio.run(test())
